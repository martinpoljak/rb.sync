melo by byt nastavitelne
OK velikost bloku
- typ comprese
- zapnuti/vypnuti komprese 
- soubory odkud
- soubory do jake slozky
- moznost nastavit kolik bloku jen prenest
- moznost nastavit offset prenosu souboru (v blocich)
- po transferu by se mel overit soucet
- predpakovavani a rozbalovani muze volitelne cachovat i na disk? (overit kvuli seekum)
- uroven komprese by mela byt nastavitelna
- buffer by mel mit nastavitelnou velkost
- melo by byt zapnutelne vypisovani mnozstvi dat v lidskych jednotkach (-h)
- mela by existovat moznost vybrat hashovaci algoritmus
- a zapnout silent mode
- nejen typ, ale i delka hashe
- block-offset a block-count (bloky) vs. offset a limit (data)
- mód výpisu sekvenční dle ladící úrovně (-verbose 0 až ...) nebo interaktivní (--friendly)

a jinak
OK odesilani by melo probihat synchronne s hashovanim
- podpora vnitrniho bufferovani (StringIO)
- hashovani i komprese by mela probihat asynchronne v threadech podle poctu CPU
OK kazdy datovy prenos bude mit dvoubajtovy prefix: ID protokolu a ID typu komprese
- korektni logovani v info rezimu
- nacitanou delku dat by asi mela resit nejaka knihovna
- blockoffset -> block-offset atd.
- měl by přenášet data souborů
- server by měl signalizovat klientovy, že už nemá žádná data a může skončit 
  hashování a zbytek objednat jako jeden celek
- zpráva typu 'hash' by atokonto měla obsahovat buď počet hashů nebo počet 
  objednávaných položek -- hashe pro porovnání, položky pro fixní vynucení;
  tak bude možné i vynutit přenos -- argument --force

velikost bloku i kompresi si klient se serverem vyjedna

###

require 'curses'
 
Curses.init_screen
begin
  Curses.setpos(6, 3)  # column 6, row 3
  Curses.addstr("Hello")
 
  Curses.getch  # Wait until user presses some key.
ensure
  Curses.close_screen
end
